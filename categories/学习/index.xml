<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>学习 on New World | YoungWilliam's Blog</title><link>https://youngwilli.am/categories/%E5%AD%A6%E4%B9%A0/</link><description>Recent content in 学习 on New World | YoungWilliam's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>youngwilliam.zheng@gmail.com (YoungWilliam)</managingEditor><webMaster>youngwilliam.zheng@gmail.com (YoungWilliam)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 07 Oct 2019 23:56:53 +0800</lastBuildDate><atom:link href="https://youngwilli.am/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>CSAPP 笔记 听课有感</title><link>https://youngwilli.am/post/csapp-note-4/</link><pubDate>Mon, 07 Oct 2019 23:56:53 +0800</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/csapp-note-4/</guid><description>国外大学对于学术造假真的严</description><content:encoded>&lt;p>最近在B站上看CSAPP的视频课，是CMU的公开课。最大的感触是国外大学对作弊抓的非常严格，平时作业连上网搜索都算作弊，更不要说看别人屏幕、让别人告诉你怎么写。一经被抓到直接不及格，并且成绩单上有永久记录。&lt;/p>
&lt;p>反观我们学校，或者说内地的绝大多数大学，只有在考试时作弊才会被严惩，而平时作业几乎不管，就算被发现抄作业也只是口头警告。&lt;/p>
&lt;p>对此我只能感叹中国教育不知道需要多少年才能追上美国。&lt;/p>
&lt;p>在我将以上感想发到「星球」上，想要了解更多国内外关于学术造假的情况。得到一下回复：&lt;/p>
&lt;p>球友「Ahus」说：&lt;/p>
&lt;blockquote>
&lt;p>在瑞典读过半年书，平时作业查重力度确实比国内要高出不少，在网络上借鉴没问题但照抄的被查到后果很严重。最初会被校方约谈，之后再犯可能会被劝退或者转学&lt;/p>
&lt;/blockquote>
&lt;p>球友「Carl Li」说：&lt;/p>
&lt;blockquote>
&lt;p>暑假刚刚亲身体验 CSAPP（CMU 这门课叫做 15-213/513），其实 15-213 这门课对于作弊的界定真的太严了，超过我之前在加州大学圣地亚哥分校上过的本科课。&lt;/p>
&lt;p>15-213 第一课一个小时二十分钟有大半的时间在讨论学术道德的问题，针对很多刚刚入学的同学，首先是对于 CMU 学术标准的一个基本介绍（CMU 容忍两次学术不端行为，第一次这门课直接挂掉，第二次开除），以及对于这门课而言哪些行为会被认定为学术不端，包括在任何搜索引擎中直接搜索课名和课号都不可以，都会直接算作弊。虽然美国大学都把学术道德问题看得非常重要，如此严厉的我还是第一次见到。&lt;/p>
&lt;p>除此之外，15-213 也不允许和任何人讨论代码，但是可以讨论顶层设计（high-level design），例如你在写 malloc 的时候可以讨论 checkheap 函数具体包含什么内容、写 proxy 的时候可以和别人讨论任何顶层设计，但是代码讨论是绝对禁止的。&lt;/p>
&lt;p>另外 15-213 不是公开课，教授亲口说过的。其实只是 CMU 一直没处理中文互联网上传的这些视频内容……能学习到的球友也建议且看且珍惜&lt;/p>
&lt;/blockquote>
&lt;p>球友「荼蘼」说：&lt;/p>
&lt;blockquote>
&lt;p>大学是种外合办的学校，前几年去澳洲念研究生基本不要什么成绩，后来听说有个学长在澳洲念研究生作弊被劝退了，导致我们这些晚辈要去澳洲的要求分数提高了10多分&lt;/p>
&lt;/blockquote>
&lt;p>对此，不知道各位看官老爷有没有想法想要分享的呢？欢迎评论。&lt;/p>
&lt;p>PS. 如果有球友不想让自己的想法在此出现，请及时与我联系删除。&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>CSAPP</category><category>学习</category></item><item><title>CSAPP 笔记 第一章《计算机系统漫游》</title><link>https://youngwilli.am/post/csapp-note-1/</link><pubDate>Sun, 01 Sep 2019 22:40:06 +0800</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/csapp-note-1/</guid><description>大四了才开始读这本书，是不是晚了？</description><content:encoded>&lt;p>最近开始忙秋招，「码农翻身」公众号及同名书的作者老刘在知识星球里举办了读《CSAPP》的活动，之前一直没啃下来，希望能够借此机会逼自己一把，把这本厚厚的经典看完，并好好写笔记。&lt;/p>
&lt;p>计算机系统 = 硬件 + 系统软件&lt;/p>
&lt;p>作者如是说：&lt;/p>
&lt;blockquote>
&lt;p>“如果你全力投身学习本书中的概念，完全理解底 层计算机系统以及它对应用程序的影响，那么你会步上成为为数不多的“大牛&amp;quot;的道路。”&lt;/p>
&lt;/blockquote>
&lt;p>看完这本书你将会学到：&lt;/p>
&lt;ol>
&lt;li>实践技巧&lt;/li>
&lt;li>优化代码小窍门&lt;/li>
&lt;li>了解编译器如何实现&lt;/li>
&lt;li>如何识别和避免连接时那些令人讨厌的错误&lt;/li>
&lt;li>如何编写自己的 Unix shell&lt;/li>
&lt;li>认识并发的陷阱&lt;/li>
&lt;/ol>
&lt;h2 id="1-信息就是位上下文">1. 信息就是「位+上下文」&lt;/h2>
&lt;p>hello 程序生命周期开端：hel lo.c 源文件&lt;/p>
&lt;ul>
&lt;li>由2进制的 ASCII 编码后的字符组成&lt;/li>
&lt;/ul>
&lt;p>文本文件：只有ASCII字符构成的文件。如：hello.c&lt;/p>
&lt;p>二进制文件：非文本文件。&lt;/p>
&lt;p>因此，在计算机的世界中，所有的信息都是由一串比特表示。&lt;/p>
&lt;p>区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。&lt;/p>
&lt;h2 id="2-程序被其他程序翻译成不同的格式">2. 程序被其他程序翻译成不同的格式&lt;/h2>
&lt;p>hello 程序生命周期：可执行文件，或者叫「目标程序」&lt;/p>
&lt;p>编译器驱动程序：能够将「源文件」转化「目标文件」，如&lt;code>gcc&lt;/code>&lt;/p>
&lt;p>例子：&lt;/p>
&lt;pre tabindex="0">&lt;code>linux&amp;gt; gee -o hello hello.c
&lt;/code>&lt;/pre>&lt;p>这一过程又叫翻译，可分为四个阶段：&lt;/p>
&lt;p>&lt;img src="./image/CSAPP1-3.png" alt="" />&lt;/p>
&lt;p>执行这四个阶段的程序一起构成「编译系统」(compilation system)。&lt;/p>
&lt;ul>
&lt;li>预处理阶段：修改源文件，得到另一个 C 程序。
&lt;ul>
&lt;li>删除部分#开头的命令&lt;/li>
&lt;li>插入一些系统头文件，如&lt;code>stdio.h&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>编译阶段：翻译成汇编文本文件。&lt;/li>
&lt;li>汇编阶段：将汇编文本文件翻译成机器语言指令，并打包成「可重定位目标程序」(relocatable object program)的格式。&lt;/li>
&lt;li>链接阶段：合并一些调用的头文件，得到最终的可执行文件。&lt;/li>
&lt;/ul>
&lt;h2 id="3-了解编译系统如何工作">3. 了解编译系统如何工作&lt;/h2>
&lt;p>程序员必须知道编译系统如何工作的重要原因：&lt;/p>
&lt;ul>
&lt;li>优化程序性能&lt;/li>
&lt;li>理解连接时出现的错误&lt;/li>
&lt;li>避免安全漏洞&lt;/li>
&lt;/ul>
&lt;h2 id="4-处理器读并解释储存在内存中的指令">4. 处理器读并解释储存在内存中的指令&lt;/h2>
&lt;p>系统的硬件：&lt;/p>
&lt;ul>
&lt;li>总线（BUS）
&lt;ul>
&lt;li>贯穿整个系统的一组电子管道&lt;/li>
&lt;li>通常总线被设计成传送定长的字节块，也就是字 (word)。字长是一个基本的系统参数，一般为 4 个字节( 32 位）或者 8 个字节（64位）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I/O设备
&lt;ul>
&lt;li>系统与外部世界的联系通道。&lt;/li>
&lt;li>每个I/O设备都通过一个控制器或适配器与I/O总线相连。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>主存(Main Memory)
&lt;ul>
&lt;li>临时存储设备&lt;/li>
&lt;li>物理上：动态随机存取储存器(DRAM)。&lt;/li>
&lt;li>逻辑上：线性字节数组，每个字节都有其唯一的地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>处理器（CPU）
&lt;ul>
&lt;li>解释(或执行)存储在主存中指令的引擎&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>运行 hello 文件：&lt;/p>
&lt;ol>
&lt;li>在 shell 中输入&lt;code>./hello&lt;/code> 之后，shell 程序将字符逐一读入寄存器，再把它放入内存。&lt;/li>
&lt;li>回车后，shell知道输入完成，开始执行一系列指令来加载可执行的 hello 文件。&lt;/li>
&lt;li>这些指令将 hello 目标文件从磁盘复制到内存中。&lt;/li>
&lt;li>处理器将目标文件中的机器语言指令复制到寄存器中，开始解析里面的指令并执行。&lt;/li>
&lt;li>数据被现实在屏幕上。&lt;/li>
&lt;/ol>
&lt;p>注：利用 DMA 技术可以不通过处理器而直接从磁盘到达主存。&lt;/p>
&lt;h2 id="5-高速缓存至关重要">5. 高速缓存至关重要&lt;/h2>
&lt;p>上一个运行 hello 程序的例子中，信息需要依次经过：磁盘，主存，寄存器。&lt;/p>
&lt;p>这样会造成开销，减慢程序。&lt;/p>
&lt;p>因此，需要使得这些复制操作尽可能快的完成。&lt;/p>
&lt;h2 id="6-储存设备形成层次结构">6 储存设备形成层次结构&lt;/h2>
&lt;p>&lt;img src="./image/CSAPP1-9.png" alt="" />&lt;/p>
&lt;h2 id="7-操作系统管理硬件">7 操作系统管理硬件&lt;/h2>
&lt;p>操作系统：应用程序和硬件之间插入的一层软件。&lt;/p>
&lt;p>操作系统两大基本功能：&lt;/p>
&lt;ul>
&lt;li>防止硬件被失控的应用程序滥用&lt;/li>
&lt;li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。&lt;/li>
&lt;/ul>
&lt;p>操作系统提供三种基本的抽象：&lt;/p>
&lt;ol>
&lt;li>文件是对I/O设备的抽象&lt;/li>
&lt;li>虚拟内存是对主存和磁盘的抽象&lt;/li>
&lt;li>进程是处理器、主存和I/O设备的抽象&lt;/li>
&lt;/ol>
&lt;h2 id="8-系统之间利用网络通信">8 系统之间利用网络通信&lt;/h2>
&lt;p>网络可视为一个I/O设备。&lt;/p>
&lt;h2 id="9-重要主题">9 重要主题&lt;/h2>
&lt;p>Amdahl定律：&lt;/p>
&lt;p>并发和并行&lt;/p>
&lt;p>计算机抽象&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>CSAPP</category><category>学习</category></item><item><title>What is POSIX?</title><link>https://youngwilli.am/post/what-is-posix/</link><pubDate>Tue, 20 Aug 2019 02:10:40 +0800</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/what-is-posix/</guid><description>总结一下 POSIX 标准</description><content:encoded>&lt;h2 id="定义">定义&lt;/h2>
&lt;p>可移植操作系统接口（英语：&lt;code>Portable Operating System Interface&lt;/code>，缩写为&lt;code>POSIX&lt;/code>）是IEEE为要在各种 &lt;code>UNIX&lt;/code> 操作系统上运行软件，而定义 API 的一系列互相关联的&lt;strong>标准的总称&lt;/strong>，其正式称呼为&lt;code>IEEE Std 1003&lt;/code>，而国际标准名称为 &lt;code>ISO/IEC 9945&lt;/code>。&lt;/p>
&lt;h2 id="来源">来源&lt;/h2>
&lt;p>此标准源于一个大约开始于1985年的项目。&lt;/p>
&lt;p>POSIX 这个名称是由理查德·斯托曼（RMS）应IEEE的要求而提议的一个易于记忆的名称。&lt;/p>
&lt;p>它基本上是 Portable Operating System Interface（可移植操作系统接口）的缩写，而X则表明其对Unix API的传承。&lt;/p>
&lt;h2 id="组成">组成&lt;/h2>
&lt;p>当前的POSIX主要分为四个部分：&lt;/p>
&lt;ul>
&lt;li>Base Definitions&lt;/li>
&lt;li>System Interfaces&lt;/li>
&lt;li>Shell and Utilities&lt;/li>
&lt;li>Rationale&lt;/li>
&lt;/ul>
&lt;h2 id="posix-操作系统">POSIX 操作系统&lt;/h2>
&lt;p>正式认证的包括 macOS 等。&lt;/p>
&lt;p>未得到正式认证，但基本符合 POSIX 标准的有 Android、FreeBSD 等。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/POSIX">Wiki&lt;/a>&lt;/li>
&lt;/ol></content:encoded><dc:creator>YoungWilliam</dc:creator><category>POSIX</category><category>UNIX</category><category>LINUX</category><category>学习</category></item><item><title>TED 演讲吸收笔记与总结</title><link>https://youngwilli.am/post/ted/</link><pubDate>Sat, 17 Aug 2019 02:48:55 +0000</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Sat, 14 Sep 2019 23:47:52 +0800</atom:modified><guid>https://youngwilli.am/post/ted/</guid><description>我的 TED 观影笔记，希望以后能保持经常更新～</description><content:encoded>&lt;h2 id="what-do-top-students-do-differently">What do top students do differently?&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=Na8m4GPqA30">视频连接&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>重点：&lt;/p>
&lt;ul>
&lt;li>Don&amp;rsquo;t worry about IQ. 获得高分的决定因素不是 IQ，而是方法与努力。而且或者 IQ 是天生的，是你无法控制的。&lt;/li>
&lt;li>Don&amp;rsquo;t &lt;code>just&lt;/code> aim to work hard. 方法至关重要，只会努力可能还会带来更坏的结果。&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>通过调查发现，考前大部分考生会一直重复地看书或者笔记，而考高分的那一部分同学则会一直做练习题。因为考试考的不是记忆，而是知识的运用。&lt;/li>
&lt;li>许多人会指定短期的计划，比如一周的时间表。但实际上很少人能够坚持自己的时间表。通过研究那些能够坚持的人例子，发现他们经常会在每天某一个时间段设置一个自己喜欢的活动，比如打篮球，这样每天过的有盼头。而那些早早放弃的人一般会把时间安排的非常经凑，没有一个时间段是自己喜欢真心喜欢的（娱乐）活动，因此容易厌倦，坚持不下去。&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-learn-everything--jsoh-kaufman--tedxcsu">How to learn everything | Jsoh Kaufman | TEDxCSU&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=Na8m4GPqA30">视频连接&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>问题：人到中年，突然意识到没有自由时间去学习了。&lt;/p>
&lt;p>然后讲者发现：Florida State university 的一位教授，K. Anders Ericsson 最先提出 1万小时理论，即花费1万小时去学习一个新知识，最终能够成为这个领域的专家。随后还有一本书专门讲 1w 小时理论。&lt;/p>
&lt;p>但是，讲者时间有限，没有1w小时慢慢学啊。&lt;/p>
&lt;p>学习是有曲线的，前期只要一点点练习就可以达到相对高的高度。&lt;/p>
&lt;p>讲者研究出来的最有效的时间是 &lt;strong>20 小时&lt;/strong>。&lt;/p>
&lt;p>四步学习法：&lt;/p>
&lt;ol>
&lt;li>Deconstruct the skill 分解技能/知识点。&lt;/li>
&lt;li>Learn enough to self-correct&lt;/li>
&lt;li>Remove the practice barrier 降低学习门槛&lt;/li>
&lt;li>Practice at least 20 hours 最少练习/学习 20 小时&lt;/li>
&lt;/ol>
&lt;p>时间分段：&lt;/p>
&lt;ol>
&lt;li>前2小时，保证所需要的东西齐全。&lt;/li>
&lt;li>开始练习&lt;/li>
&lt;/ol>
&lt;p>现在阻止你的不是学习的难度了，而是你想学什么？What do you want to learn？&lt;/p>
&lt;h2 id="what-one-skill--an-awesome-life--dr-shimi-kang">What one skill = an awesome life? | Dr. Shimi Kang&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=1EHZAQmw2JA">视频连接&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>一个技巧就能让你拥有一个 awesome（棒极了） 的生活?&lt;/p>
&lt;p>讲者是一位哈佛高材生、医生，但却依旧活的很累（in trouble），连三个孩子都照顾不过来，完全比不过当初成功养育她兄弟姐妹五个人的妈妈。&lt;/p>
&lt;p>她在一番思考总结之后发现，最重要的是 Adaptability（适应能力）。&lt;/p>
&lt;p>同时，她拿海豚作为例子进行讲解她总结的「POD」理论，也就是 Adaptability 的关键：&lt;/p>
&lt;ul>
&lt;li>P: Play. 儿时那种无忧无虑的玩耍，没有规则，可以随意畅想。&lt;/li>
&lt;li>O: Others. Why we adapt？O 是我们适应的源头，我们需要社交，需要交流，要不然会生病，心理疾病。&lt;/li>
&lt;li>D: Downtime. When we adapt? 要有一段专门放松的时间。“压力是21世纪第一病因”。&lt;/li>
&lt;/ul>
&lt;p>讲者提出三个单词时，都说了这个是对自己的 reward（奖励），奖励自己努力工作，努力学习。&lt;/p>
&lt;p>我的感想：&lt;/p>
&lt;ol>
&lt;li>首先，通过这个演讲我学的最多就是讲者吐字清晰，一字一停，完全不会因为自己是 native speaker 而说的很快。而我平时喜欢说话很快，老是无法清晰的表达自己的观点。这点值得我学习。&lt;/li>
&lt;li>其次，她的「POD」能够成书，还能畅销世界，我觉得实在厉害。虽然这个理论可能很多人都懂，但能够说出来，总结出来，并写成书的还是很少的。可见人与人的差距还是非常大的，而且随着现代人越来越忙，突然发现有人说「放松」、「玩耍」可以拥有更好的生活，岂不是找到偷懒的借口？&lt;/li>
&lt;/ol></content:encoded><dc:creator>YoungWilliam</dc:creator><category>TED</category><category>思维方式</category><category>笔记</category><category>学习</category></item><item><title>Docker 背后： Linux 的 /proc</title><link>https://youngwilli.am/post/linux-proc/</link><pubDate>Fri, 02 Aug 2019 02:04:09 +0000</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Wed, 14 Aug 2019 01:25:12 +0800</atom:modified><guid>https://youngwilli.am/post/linux-proc/</guid><description>我的 Docker 原理探索之路</description><content:encoded>&lt;h2 id="为什么要有-proc">为什么要有 &lt;code>/proc&lt;/code>？&lt;/h2>
&lt;p>想必在日常开发&lt;del>写&lt;/del>查 BUG 中，你会经常用到像 &lt;code>top&lt;/code>、&lt;code>ps&lt;/code> 这样的 Linux 命令来查看进程、CPU 的状态吧。&lt;/p>
&lt;p>那你是否有想过：这些不都是内核才知道的吗？而作为身处 shell （用户态）的我们又是通过什么途径知道这些的呢？&lt;/p>
&lt;p>是有什么 system call 吗？是有什么高级的接口吗？&lt;/p>
&lt;p>不不不，其实是通过一个神奇的目录，也就是今天的主角 &lt;code>/proc&lt;/code>。&lt;/p>
&lt;p>实际上，&lt;code>top&lt;/code> 中的数据就是读取 &lt;code>/proc/stat&lt;/code> 文件获得的，&lt;code>/proc/stat&lt;/code> 文件被读取时会自动更新，从而 &lt;code>top&lt;/code> 获得最新的 CPU 占用率情况。&lt;/p>
&lt;h2 id="proc-是什么">&lt;code>/proc&lt;/code> 是什么？&lt;/h2>
&lt;p>&lt;code>/proc&lt;/code> 其实不是一个“真正”的文件目录，而是一个“虚拟”的文件系统（virtual filesystem）。&lt;/p>
&lt;p>为什么是虚拟的呢？因为它不写入&lt;strong>外存&lt;/strong>空间，只存在于&lt;strong>内存&lt;/strong>中。&lt;/p>
&lt;p>它包含了系统运行时的信息，包括：&lt;/p>
&lt;ul>
&lt;li>当前运行进程信息&lt;/li>
&lt;li>系统内存&lt;/li>
&lt;li>mount 设备信息&lt;/li>
&lt;li>一些硬件配置&lt;/li>
&lt;li>&amp;hellip;等。&lt;/li>
&lt;/ul>
&lt;p>因此，可以把它当作&lt;strong>内核&lt;/strong>的信息中心。&lt;/p>
&lt;p>当然许多系统工具都是通过简单读取该目录下的某些内容。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;ol>
&lt;li>&lt;code>lsmod&lt;/code> = &lt;code>cat /proc/modules&lt;/code>&lt;/li>
&lt;li>&lt;code>lspci&lt;/code> = &lt;code>cat /proc/pci&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>在系统正在运行时，你甚至可以通过修改 &lt;code>/proc&lt;/code> 目录下文件，来读取修改系统的内核参数（sysctl）。&lt;/p>
&lt;h2 id="proc-基本目录结构">&lt;code>/proc&lt;/code> 基本目录结构&lt;/h2>
&lt;p>因为文件都在内存中，如果你去看每个文件的大小，你会发现都是 0，除了 &lt;code>kcore&lt;/code>, &lt;code>mtrr&lt;/code> and &lt;code>self&lt;/code>。&lt;/p>
&lt;p>当遍历这个目录的时候，会发现有些数字，这些都是为每个进程创建的空间，数字就是它们的 PID。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>go_dev@0f8b372ed635 proc&lt;span class="o">]&lt;/span>$ ll /proc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">9&lt;/span> go_dev go_dev &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">9&lt;/span> go_dev go_dev &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxrwt &lt;span class="m">2&lt;/span> root root &lt;span class="m">40&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 acpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 buddyinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">4&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 bus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 cgroups
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 cmdline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">23709&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 config.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 consoles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 cpuinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 crypto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 devices
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 diskstats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 dma
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">2&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 driver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 execdomains
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 fb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 filesystems
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">8&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 fs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 interrupts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 iomem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 ioports
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">31&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 irq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 kallsyms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">3&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 kcore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 key-users
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">3&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r-------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 kmsg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r-------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 kpagecgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r-------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 kpagecount
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r-------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 kpageflags
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 loadavg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 locks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 meminfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 misc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">11&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 mounts -&amp;gt; self/mounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">2&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 mpt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 mtrr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">8&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 net -&amp;gt; self/net
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 pagetypeinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 partitions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">3&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 sched_debug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 self -&amp;gt; &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 slabinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 softirqs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 swaps
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 sys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--w------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 sysrq-trigger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">2&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 sysvipc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 thread-self -&amp;gt; 30/task/30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">3&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:43 timer_list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dr-xr-xr-x &lt;span class="m">4&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 tty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 uptime
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r-------- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 vmallocinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 vmstat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Aug &lt;span class="m">1&lt;/span> 18:44 zoneinfo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在此介绍几个比较重要的部分：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>/proc/N&lt;/th>
&lt;th>PID 为 N 的进程信息&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/proc/N/cmdline&lt;/td>
&lt;td>进程启动命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/cwd&lt;/td>
&lt;td>链接到进程当前工作目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/environ&lt;/td>
&lt;td>进程环境变量列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/exe&lt;/td>
&lt;td>链接到进程的执行命令文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/fd&lt;/td>
&lt;td>包含进程相关的所有文件描述符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/maps&lt;/td>
&lt;td>与进程相关的内存映射信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/mem&lt;/td>
&lt;td>指代进程持有的内存，不可读&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/root&lt;/td>
&lt;td>链接到进程的根目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/stat&lt;/td>
&lt;td>进程的状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/statm&lt;/td>
&lt;td>进程使用的内存状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/N/status&lt;/td>
&lt;td>进程状态信息，比 stat/statm 更具可读性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/proc/self/&lt;/td>
&lt;td>链接到当前正在运行的进程&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果像了解更多的话，请自行 google 或者看看 &lt;a href="https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html">Linux Filesystem Hierarchy: 1.14. /proc&lt;/a>。&lt;/p>
&lt;h2 id="docker-如何利用到-proc">Docker 如何利用到 &lt;code>/proc&lt;/code>？&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html">Linux Filesystem Hierarchy: 1.14. /proc&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://book.douban.com/subject/27082348/">《自己动手写Docker》&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Procfs">wiki: procfs&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></content:encoded><dc:creator>YoungWilliam</dc:creator><category>linux</category><category>docker</category><category>proc</category><category>学习</category></item><item><title>《剑指Offer》笔记</title><link>https://youngwilli.am/post/coding-interviews-note-1/</link><pubDate>Sun, 28 Jul 2019 18:17:25 +0000</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/coding-interviews-note-1/</guid><description>《剑指Offer》笔记，不定时更新～</description><content:encoded>&lt;p>还没好好看一遍《剑指Offer》，希望在阅读的过程中能记录一下，同时也方便以后复习。&lt;/p>
&lt;!-- more -->
&lt;h2 id="3-高质量的代码">3. 高质量的代码&lt;/h2>
&lt;h3 id="32-代码的规范性">3.2 代码的规范性&lt;/h3>
&lt;h4 id="代码的完整性">代码的完整性:&lt;/h4>
&lt;ul>
&lt;li>功能测试：要满足基本功能、尽量突破常规思维的限制&lt;/li>
&lt;li>边界测试：考虑循环、递归终止条件；字符串转整数时确保极大极小值等。&lt;/li>
&lt;li>负面测试：各种可能的错误输入&lt;/li>
&lt;/ul>
&lt;h4 id="3-种错误处理的方法">3 种错误处理的方法：&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>返回值&lt;/td>
&lt;td>和系统 API 一致，0 为正常，其他为错误&lt;/td>
&lt;td>不能方便使用计算结果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>全局变量&lt;/td>
&lt;td>可以直接得到计算结果，方便使用&lt;/td>
&lt;td>很容易忘记检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异常&lt;/td>
&lt;td>逻辑清晰，明确定义错误类型&lt;/td>
&lt;td>一些语言不支持，对性能有负面影响&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>具体用哪种需要考虑具体场景，可以和面试讨论一下采用哪种比较合适。&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>笔记</category><category>剑指Offer</category><category>学习</category></item><item><title>Caoz《成长的烦恼》笔记</title><link>https://youngwilli.am/post/caoz-class-node/</link><pubDate>Fri, 28 Dec 2018 21:48:55 +0000</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/caoz-class-node/</guid><description>记录一下～</description><content:encoded>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>这门课是张哥（stormzhang）在朋友圈推荐的，买的话可以直接进入 Caoz 的星球。我主要是冲着星球去的，因为星球价值真的高啊。其实之前本来就打算进星球的，无奈刚换电脑，比较拮据，就只好等待机会。进了星球，发现一堆创业大佬，就是一个人脉圈啊，有没有作用，就看你的本事了。以上就是星球附赠的课程《成长的烦恼》的由来。因为时间限制，28 号晚上就会无法访问，就想称此机会好好读读。&lt;/p>
&lt;h2 id="1-读书时代">1. 读书时代&lt;/h2>
&lt;h3 id="11-尽早确立职场目标并准备">1.1. 尽早确立职场目标并准备&lt;/h3>
&lt;p>曹大在这里描述了一下自己的学生生涯，悔恨自己当初没有好好学好专业课，以至于错失许多机会。&lt;/p>
&lt;p>摘录：&lt;/p>
&lt;blockquote>
&lt;p>对于专业技能，特别是计算机的专业技能，我建议是一精多通：你能在某个特定领域达到足够的高度，而其他相关领域达到一定的标准。原因：&lt;/p>
&lt;ol>
&lt;li>需要跟不同领域的人沟通时，更好地理解对方，换位思考，降低沟通成本。&lt;/li>
&lt;li>可以在特殊情况下自己干。&lt;/li>
&lt;li>企业喜欢这种全才。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="12-切忌陷入自以为是的境地">1.2. 切忌陷入自以为是的境地&lt;/h3>
&lt;blockquote>
&lt;p>为什么自以为是？信息获取的渠道很窄。=》价值观趋同，社会认知趋同。&lt;/p>
&lt;p>很多真正很有价值的真相，在读书的时候是看不见的。你从媒体看互联网，你从那些成功者的演说里看互联网，你是看不到真相的。&lt;/p>
&lt;p>如何解决？&lt;br />
多跟不同人群沟通。&lt;br />
尽早实习，多跟不同部门沟通。&lt;/p>
&lt;p>例子1:&lt;br />
遇到没有听说过的的公司可以去搜一下资料，并且听听他们的宣讲。&lt;br />
“今天见到李开复咯，收获好大哦～收获了啥呢？朋友圈的赞。。。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="13-基础思想和逻辑需要尽早培养">1.3. 基础思想和逻辑需要尽早培养&lt;/h3>
&lt;p>理解公式来锻炼自己的理解能力。&lt;/p>
&lt;p>世界上大部分人不具备逻辑能力。无法用最优解的思想去思考。&lt;/p>
&lt;p>学好基础，培养思想，而不是去学工具。&lt;/p>
&lt;h2 id="2-关于求职">2. 关于求职&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>经常的错误：不尊重职场。&lt;br />
求职前要有准备，要调研，要在简历中体现你的准备和思考。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要谦虚和积极。&lt;br />
愿意从基层做起，从小事做起。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>职场要体面一点。&lt;br />
初次相遇，一切重要场合还是需要的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>面试问问题。要有准备。基于企业的公开信息进行提问，挖掘出深度问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="3-个人职场定位">3. 个人职场定位&lt;/h2>
&lt;h3 id="31-找到个人专长">3.1. 找到个人专长&lt;/h3>
&lt;p>“看上去很全能，其实不堪一击。”&lt;/p>
&lt;h3 id="32-好奇心是动力之源">3.2. 好奇心是动力之源&lt;/h3>
&lt;p>“一定要知道自己最痴迷什么？”&lt;/p>
&lt;p>“我是怎么甄别信息的，其实很简单，就是好奇心。对某一个新闻，有些人有好奇心就会去挖掘这些信息，而大多数人是不关心的。”&lt;/p>
&lt;h3 id="33-要建立全局意识和整体感">3.3. 要建立全局意识和整体感&lt;/h3>
&lt;p>“对行业、专业的要有认知，知道机会和方向在哪儿，要知道自己更上台阶需要去哪儿。”&lt;/p>
&lt;p>“所以我经常建议年轻人，读书的，没毕业的或刚毕业的多多看看行业内顶尖企业的财报，了解行业发展的规模/竞争态势。”&lt;/p>
&lt;p>“新兴领域、新兴机会也要多看看，比如百度的热榜，爱站指数，认真挖掘，对行业认知的其实会增加许多。”&lt;/p>
&lt;p>提到几位人物：余军、边江、高少星&lt;/p>
&lt;p>“多去了解企业整体架构。了解公司的核心价值和主要方向。”&lt;/p>
&lt;p>“职场秘密：快速拓展的公司，很多中层为了自己的发展，快速启动新的项目团队，每个项目看上去都很有价值很有机会，然后大家忙忙碌碌为了新的机会各种打拼。但是，其实从公司战略和格局来说，绝大多数都是试验品、甚至是垃圾。等到市场风向逆转的时候，老板开始核查成本，这些乱七八糟的玩意儿全部砍掉。你觉自己很拼，很有贡献，可在老板眼里一文不值。”&lt;/p>
&lt;p>“一定要站的高一点，站在上司的位置看问题，看机会，看方向。如果看不到，多问！”&lt;/p>
&lt;p>“把四五个人的工作量给一个人做，可能会发现只有少数的事有必要做。”&lt;/p>
&lt;p>佩服的人：李兴平，做网站特别强。在没有资源的情况下，比专业人士做的好。&lt;/p>
&lt;h3 id="34-关于个人待遇的话题">3.4. 关于个人待遇的话题&lt;/h3>
&lt;p>“职场定位，你要对自己的发展目标有整体的认识。”&lt;/p>
&lt;ul>
&lt;li>发展期：20-30 关注成长，只有吃苦。只有少数人能真正踩对路，少走弯路。&lt;/li>
&lt;li>成熟期：30-35 达到Top10% 提高企业职位、提高业界影响力、建立人脉。
&lt;ul>
&lt;li>“不需要顶尖水平，因为很多顶尖水平的人没意识到这一点。”&lt;/li>
&lt;li>“达到领域内 Top 10% 并不难，绝大部分人又懒又爱给自己找借口。”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>变现期：35之后务必快速走入变现期。能力够了，影响力和口碑够了。这个时候就要让自己价值最大化。&lt;/li>
&lt;/ul>
&lt;p>索要期权，知道整个期权的比例。要有概念。&lt;/p>
&lt;p>创业要确定好退出条款。毕竟「能共患难，不一定能共享福。」&lt;/p>
&lt;h3 id="35-互相成就">3.5. 互相成就&lt;/h3>
&lt;p>写工作报告的时候将帮助过自己的人写进去，不仅可以帮助别人，对自己也没什么损失，何乐而不为呢？&lt;/p>
&lt;h2 id="4-谈谈创业">4. 谈谈创业&lt;/h2>
&lt;p>这个部分曹大讲了许多自己的例子。大部分内容在曹大的文章都有提及，就不一一粘贴了。&lt;/p>
&lt;h3 id="41-创业需要视野和格局">4.1. 创业需要视野和格局&lt;/h3>
&lt;p>“所以创业有几个教训：1. 居安思危，眼光要长远。 2. 动作要快，行动力要强。 3. 必要的时候需要魄力，需要团队，需要资金，不能当干。单干格局太低。”&lt;/p>
&lt;p>“你写了很多代码，很酷的技术，没有人用，很少人用，你技术再牛又怎么样呢？&lt;strong>你代码很简单，被广泛用起来，而且为别人真正带来了价值，你的工作就是很有价值。&lt;/strong>”&lt;/p>
&lt;p>创业历程：&lt;/p>
&lt;ul>
&lt;li>上世纪末：
&lt;ul>
&lt;li>交换链。错失 hao123&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2004：
&lt;ul>
&lt;li>OA系统，一个人，安装包压缩到 5m。代码量大，但用的人不多。&lt;/li>
&lt;li>统计系统。代码量少，但很多人用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="42-创业需要懂得价值评估">4.2. 创业需要懂得价值评估&lt;/h3>
&lt;h3 id="43-更好的理解人性">4.3. 更好的理解人性&lt;/h3>
&lt;h3 id="44-财务和数据">4.4. 财务和数据&lt;/h3>
&lt;h2 id="5-总结与回复">5. 总结与回复&lt;/h2>
&lt;h2 id="6-最后的感受">6. 最后的感受&lt;/h2>
&lt;p>这是我自己听完曹大课的感受。曹大在这期课程里着重强调了看待事物的全局观和自己的好奇心。&lt;/p>
&lt;p>先说说全局观，我觉得全局观就是在多个角度想问题：从领导角度也好，从别的部门角度也好，总之就是多想想，多看看，搞明白市场的变化方向，理解最重要的核心，理解好利益冲突。&lt;/p>
&lt;p>再说说好奇心，曹大的信息筛选全凭好奇心。而曹大的好奇心有点跟我的不太一样，他对许多未知的事物都感到好奇，希望更多地了解，会从一则小新闻里衍生地去查很多相关资料。&lt;/p>
&lt;p>另外说一句，有实效性的课程真的能够克服懒癌，能够逼着自己去读完听完而不浪费难得的机会。想想躺在书架上的那么多书还没怎么翻过，还有「极客时间」里的十几个课程还只看了一点点，而我却没有一丝愧疚。可能我还不够优秀吧。&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>Caoz</category><category>思维方式</category><category>学习</category></item></channel></rss>