<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>CSAPP on New World | YoungWilliam's Blog</title><link>https://youngwilli.am/tags/csapp/</link><description>Recent content in CSAPP on New World | YoungWilliam's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>youngwilliam.zheng@gmail.com (YoungWilliam)</managingEditor><webMaster>youngwilliam.zheng@gmail.com (YoungWilliam)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 07 Oct 2019 23:56:53 +0800</lastBuildDate><atom:link href="https://youngwilli.am/tags/csapp/index.xml" rel="self" type="application/rss+xml"/><item><title>CSAPP 笔记 听课有感</title><link>https://youngwilli.am/post/csapp-note-4/</link><pubDate>Mon, 07 Oct 2019 23:56:53 +0800</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/csapp-note-4/</guid><description>国外大学对于学术造假真的严</description><content:encoded>&lt;p>最近在B站上看CSAPP的视频课，是CMU的公开课。最大的感触是国外大学对作弊抓的非常严格，平时作业连上网搜索都算作弊，更不要说看别人屏幕、让别人告诉你怎么写。一经被抓到直接不及格，并且成绩单上有永久记录。&lt;/p>
&lt;p>反观我们学校，或者说内地的绝大多数大学，只有在考试时作弊才会被严惩，而平时作业几乎不管，就算被发现抄作业也只是口头警告。&lt;/p>
&lt;p>对此我只能感叹中国教育不知道需要多少年才能追上美国。&lt;/p>
&lt;p>在我将以上感想发到「星球」上，想要了解更多国内外关于学术造假的情况。得到一下回复：&lt;/p>
&lt;p>球友「Ahus」说：&lt;/p>
&lt;blockquote>
&lt;p>在瑞典读过半年书，平时作业查重力度确实比国内要高出不少，在网络上借鉴没问题但照抄的被查到后果很严重。最初会被校方约谈，之后再犯可能会被劝退或者转学&lt;/p>
&lt;/blockquote>
&lt;p>球友「Carl Li」说：&lt;/p>
&lt;blockquote>
&lt;p>暑假刚刚亲身体验 CSAPP（CMU 这门课叫做 15-213/513），其实 15-213 这门课对于作弊的界定真的太严了，超过我之前在加州大学圣地亚哥分校上过的本科课。&lt;/p>
&lt;p>15-213 第一课一个小时二十分钟有大半的时间在讨论学术道德的问题，针对很多刚刚入学的同学，首先是对于 CMU 学术标准的一个基本介绍（CMU 容忍两次学术不端行为，第一次这门课直接挂掉，第二次开除），以及对于这门课而言哪些行为会被认定为学术不端，包括在任何搜索引擎中直接搜索课名和课号都不可以，都会直接算作弊。虽然美国大学都把学术道德问题看得非常重要，如此严厉的我还是第一次见到。&lt;/p>
&lt;p>除此之外，15-213 也不允许和任何人讨论代码，但是可以讨论顶层设计（high-level design），例如你在写 malloc 的时候可以讨论 checkheap 函数具体包含什么内容、写 proxy 的时候可以和别人讨论任何顶层设计，但是代码讨论是绝对禁止的。&lt;/p>
&lt;p>另外 15-213 不是公开课，教授亲口说过的。其实只是 CMU 一直没处理中文互联网上传的这些视频内容……能学习到的球友也建议且看且珍惜&lt;/p>
&lt;/blockquote>
&lt;p>球友「荼蘼」说：&lt;/p>
&lt;blockquote>
&lt;p>大学是种外合办的学校，前几年去澳洲念研究生基本不要什么成绩，后来听说有个学长在澳洲念研究生作弊被劝退了，导致我们这些晚辈要去澳洲的要求分数提高了10多分&lt;/p>
&lt;/blockquote>
&lt;p>对此，不知道各位看官老爷有没有想法想要分享的呢？欢迎评论。&lt;/p>
&lt;p>PS. 如果有球友不想让自己的想法在此出现，请及时与我联系删除。&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>CSAPP</category><category>学习</category></item><item><title>CSAPP 笔记 第一章《计算机系统漫游》</title><link>https://youngwilli.am/post/csapp-note-1/</link><pubDate>Sun, 01 Sep 2019 22:40:06 +0800</pubDate><author>youngwilliam.zheng@gmail.com (YoungWilliam)</author><atom:modified>Fri, 17 Jul 2020 18:33:36 +0800</atom:modified><guid>https://youngwilli.am/post/csapp-note-1/</guid><description>大四了才开始读这本书，是不是晚了？</description><content:encoded>&lt;p>最近开始忙秋招，「码农翻身」公众号及同名书的作者老刘在知识星球里举办了读《CSAPP》的活动，之前一直没啃下来，希望能够借此机会逼自己一把，把这本厚厚的经典看完，并好好写笔记。&lt;/p>
&lt;p>计算机系统 = 硬件 + 系统软件&lt;/p>
&lt;p>作者如是说：&lt;/p>
&lt;blockquote>
&lt;p>“如果你全力投身学习本书中的概念，完全理解底 层计算机系统以及它对应用程序的影响，那么你会步上成为为数不多的“大牛&amp;quot;的道路。”&lt;/p>
&lt;/blockquote>
&lt;p>看完这本书你将会学到：&lt;/p>
&lt;ol>
&lt;li>实践技巧&lt;/li>
&lt;li>优化代码小窍门&lt;/li>
&lt;li>了解编译器如何实现&lt;/li>
&lt;li>如何识别和避免连接时那些令人讨厌的错误&lt;/li>
&lt;li>如何编写自己的 Unix shell&lt;/li>
&lt;li>认识并发的陷阱&lt;/li>
&lt;/ol>
&lt;h2 id="1-信息就是位上下文">1. 信息就是「位+上下文」&lt;/h2>
&lt;p>hello 程序生命周期开端：hel lo.c 源文件&lt;/p>
&lt;ul>
&lt;li>由2进制的 ASCII 编码后的字符组成&lt;/li>
&lt;/ul>
&lt;p>文本文件：只有ASCII字符构成的文件。如：hello.c&lt;/p>
&lt;p>二进制文件：非文本文件。&lt;/p>
&lt;p>因此，在计算机的世界中，所有的信息都是由一串比特表示。&lt;/p>
&lt;p>区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。&lt;/p>
&lt;h2 id="2-程序被其他程序翻译成不同的格式">2. 程序被其他程序翻译成不同的格式&lt;/h2>
&lt;p>hello 程序生命周期：可执行文件，或者叫「目标程序」&lt;/p>
&lt;p>编译器驱动程序：能够将「源文件」转化「目标文件」，如&lt;code>gcc&lt;/code>&lt;/p>
&lt;p>例子：&lt;/p>
&lt;pre tabindex="0">&lt;code>linux&amp;gt; gee -o hello hello.c
&lt;/code>&lt;/pre>&lt;p>这一过程又叫翻译，可分为四个阶段：&lt;/p>
&lt;p>&lt;img src="./image/CSAPP1-3.png" alt="" />&lt;/p>
&lt;p>执行这四个阶段的程序一起构成「编译系统」(compilation system)。&lt;/p>
&lt;ul>
&lt;li>预处理阶段：修改源文件，得到另一个 C 程序。
&lt;ul>
&lt;li>删除部分#开头的命令&lt;/li>
&lt;li>插入一些系统头文件，如&lt;code>stdio.h&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>编译阶段：翻译成汇编文本文件。&lt;/li>
&lt;li>汇编阶段：将汇编文本文件翻译成机器语言指令，并打包成「可重定位目标程序」(relocatable object program)的格式。&lt;/li>
&lt;li>链接阶段：合并一些调用的头文件，得到最终的可执行文件。&lt;/li>
&lt;/ul>
&lt;h2 id="3-了解编译系统如何工作">3. 了解编译系统如何工作&lt;/h2>
&lt;p>程序员必须知道编译系统如何工作的重要原因：&lt;/p>
&lt;ul>
&lt;li>优化程序性能&lt;/li>
&lt;li>理解连接时出现的错误&lt;/li>
&lt;li>避免安全漏洞&lt;/li>
&lt;/ul>
&lt;h2 id="4-处理器读并解释储存在内存中的指令">4. 处理器读并解释储存在内存中的指令&lt;/h2>
&lt;p>系统的硬件：&lt;/p>
&lt;ul>
&lt;li>总线（BUS）
&lt;ul>
&lt;li>贯穿整个系统的一组电子管道&lt;/li>
&lt;li>通常总线被设计成传送定长的字节块，也就是字 (word)。字长是一个基本的系统参数，一般为 4 个字节( 32 位）或者 8 个字节（64位）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I/O设备
&lt;ul>
&lt;li>系统与外部世界的联系通道。&lt;/li>
&lt;li>每个I/O设备都通过一个控制器或适配器与I/O总线相连。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>主存(Main Memory)
&lt;ul>
&lt;li>临时存储设备&lt;/li>
&lt;li>物理上：动态随机存取储存器(DRAM)。&lt;/li>
&lt;li>逻辑上：线性字节数组，每个字节都有其唯一的地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>处理器（CPU）
&lt;ul>
&lt;li>解释(或执行)存储在主存中指令的引擎&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>运行 hello 文件：&lt;/p>
&lt;ol>
&lt;li>在 shell 中输入&lt;code>./hello&lt;/code> 之后，shell 程序将字符逐一读入寄存器，再把它放入内存。&lt;/li>
&lt;li>回车后，shell知道输入完成，开始执行一系列指令来加载可执行的 hello 文件。&lt;/li>
&lt;li>这些指令将 hello 目标文件从磁盘复制到内存中。&lt;/li>
&lt;li>处理器将目标文件中的机器语言指令复制到寄存器中，开始解析里面的指令并执行。&lt;/li>
&lt;li>数据被现实在屏幕上。&lt;/li>
&lt;/ol>
&lt;p>注：利用 DMA 技术可以不通过处理器而直接从磁盘到达主存。&lt;/p>
&lt;h2 id="5-高速缓存至关重要">5. 高速缓存至关重要&lt;/h2>
&lt;p>上一个运行 hello 程序的例子中，信息需要依次经过：磁盘，主存，寄存器。&lt;/p>
&lt;p>这样会造成开销，减慢程序。&lt;/p>
&lt;p>因此，需要使得这些复制操作尽可能快的完成。&lt;/p>
&lt;h2 id="6-储存设备形成层次结构">6 储存设备形成层次结构&lt;/h2>
&lt;p>&lt;img src="./image/CSAPP1-9.png" alt="" />&lt;/p>
&lt;h2 id="7-操作系统管理硬件">7 操作系统管理硬件&lt;/h2>
&lt;p>操作系统：应用程序和硬件之间插入的一层软件。&lt;/p>
&lt;p>操作系统两大基本功能：&lt;/p>
&lt;ul>
&lt;li>防止硬件被失控的应用程序滥用&lt;/li>
&lt;li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。&lt;/li>
&lt;/ul>
&lt;p>操作系统提供三种基本的抽象：&lt;/p>
&lt;ol>
&lt;li>文件是对I/O设备的抽象&lt;/li>
&lt;li>虚拟内存是对主存和磁盘的抽象&lt;/li>
&lt;li>进程是处理器、主存和I/O设备的抽象&lt;/li>
&lt;/ol>
&lt;h2 id="8-系统之间利用网络通信">8 系统之间利用网络通信&lt;/h2>
&lt;p>网络可视为一个I/O设备。&lt;/p>
&lt;h2 id="9-重要主题">9 重要主题&lt;/h2>
&lt;p>Amdahl定律：&lt;/p>
&lt;p>并发和并行&lt;/p>
&lt;p>计算机抽象&lt;/p></content:encoded><dc:creator>YoungWilliam</dc:creator><category>CSAPP</category><category>学习</category></item></channel></rss>